package main

import (
	"flag"
	"fmt"
	"log"
	"os"

	"{{ .ProjectNamespace }}/internal/config"
	"{{ .ProjectNamespace }}/internal/route"
	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
	"github.com/pkg/errors"
	"gitlab.com/wpetit/goweb/middleware/container"
)

// nolint: gochecknoglobals
var (
	GitRef         = "unknown"
	ProjectVersion = "unknown"
	BuildDate      = "unknown"
)

//nolint: gochecknoglobals
var (
	configFile   = ""
	dumpConfig   = false
	version      = false
	migrate      = false
	rollbackLast = false
)

func init() {
	flag.StringVar(&configFile, "config", configFile, "configuration file")
	flag.BoolVar(&dumpConfig, "dump-config", dumpConfig, "dump configuration and exit")
	flag.BoolVar(&version, "version", version, "show version and exit")
	flag.BoolVar(&migrate, "migrate", migrate, "apply database migration and exit")
	flag.BoolVar(&rollbackLast, "rollback-last", rollbackLast, "rollback last database migration and exit")
}

func main() {
	flag.Parse()

	if version {
		fmt.Printf("%s (%s) - %s\n", ProjectVersion, GitRef, BuildDate)

		os.Exit(0)
	}

	var conf *config.Config
	var err error

	if configFile != "" {
		conf, err = config.NewFromFile(configFile)
		if err != nil {
			log.Fatalf("%s", err)
		}
	} else {
		conf = config.DefaultConfig()
	}

	if err := config.WithEnvironment(conf); err != nil {
		log.Fatalf("%+v", errors.Wrap(err, "could not override config with environment"))
	}

	if dumpConfig {
		if err := conf.Dump(os.Stdout); err != nil {
			log.Fatalf("%+v", errors.Wrapf(err, "could not dump config"))
		}
		os.Exit(0)
	}

	if conf.WorkDir != "" {
		if err := os.Chdir(conf.WorkDir); err != nil {
			log.Fatalf("%+v", errors.Wrapf(err, "could not change working directory '%s'", conf.WorkDir))
		}
	}

	// Create service container
	ctn, err := getServiceContainer(conf)
	if err != nil {
		log.Fatalf("%+v", errors.Wrap(err, "could not create service container"))
	}

	r := chi.NewRouter()

	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(container.ServiceContainer(ctn))

	if err := route.Mount(conf, r); err != nil {
		log.Fatalf("%+v", errors.Wrapf(err, "could not mount routes"))
	}

	serveHTTP(conf, r)
}
